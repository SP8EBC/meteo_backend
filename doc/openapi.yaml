openapi: 3.0.3
info:
  title: Pogoda.cc
  description: |-
    Backend API specification for pogoda.cc system
  contact:
    email: sp8ebc@interia.pl
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: API source code
  url: https://github.com/SP8EBC/meteo_backend
servers:
  - url: http://pogoda.cc:8080/meteo_backend_web/
tags:
  - name: station
    description: Get measurements sent by stations
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: list of all stations
    description: Lists all weather stations defined in the system
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: meteo system
    description: Endpoints specific for MeteoSystem android app
paths:
  /station/{stationName}/availableParameters:
    get:
      tags:
        - station
      summary: Get all parameters measured by station
      description: ...
      parameters:
        - name: stationName
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableParametersModel'          
            application/xml:
              schema:
                $ref: '#/components/schemas/AvailableParametersModel'
        '404':
          description: Station doesn't exist
  /station/{stationName}/stationData:
    get:
      tags:
        - station
      summary: Get measurements data for specified period
      description: This endpoint returns all measurements done between two specified timestamps. 
        Maximum time period is limited to 7 days at once!!
      parameters:
        - name: stationName
          in: path
          required: true
          schema: 
            type: string
        - name: from
          in: query
          required: true
          description: "Timestamp in UNIX epoch format (UTC)"
          schema:
            type: integer
            format: int64
        - name: to
          in: query
          required: true
          description: "Timestamp in UNIX epoch format (UTC)"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StationDataModel'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StationDataModel'
        '416':
          description: Requested time period is too long
  /station/{stationName}/lastStationData:
    get:
      tags:
        - station
      summary: Get last data measured by station
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      parameters:
        - name: stationName
          in: path
          required: true
          schema: 
            type: string
        - name: ascendingOrder
          in: query
          description: "Set to true to change sorting order to older-first"
          required: true
          schema:
            type: integer
            format: int64
        - name: isLong
          in: query
          required: true
          description: "Set to true to get last 2000 records instead of 50"
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StationDataModel'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StationDataModel'
        '400':
          description: Invalid tag value
  /station/{stationName}/summary:
    get:
      tags:
        - station
      summary: Returns measurement summary for station
      description: Summary
      parameters:
        - name: stationName
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Summary'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Summary'
        '404':
          description: Station not found
  /station/{stationName}/trend:
    get:
      tags:
        - station
      summary: Returns trend of measurement changes
      description: Summary
      parameters:
        - name: stationName
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trend'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Trend'
        '404':
          description: Station not found
  /station/{stationName}/stationCurrentLocalTime:
    get:
      tags:
        - station
      summary: Returns current local RTC time for a station
      description: Used mainly to synchronize RTC clock in ParaMETEO
      parameters:
        - name: stationName
          in: path
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationCurrentLocalTime'          
            application/xml:
              schema:
                $ref: '#/components/schemas/StationCurrentLocalTime'
        '404':
          description: Station not found
  /listOfAllStations:
    get:
      tags:
        - list of all stations
      description: ''
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfAllStations'          
            application/xml:
              schema:
                $ref: '#/components/schemas/ListOfAllStations'
  /groups/all:
    get:
      tags:
        - meteo system
      summary: 'Returns a list of all station groups defined in the system'
      description: ''
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StationsGroup'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StationsGroup'
  /groups/stations/{id}:
    get:
      tags:
        - meteo system
      summary: 'Returns all stations associated with given group'
      description: ''
      parameters:
        - name: id
          in: path
          required: true
          schema: 
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StationGroupStations'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StationGroupStations'
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    AvailableParametersModel:
      description: "desc"
      properties:
        hasWind:
          type: boolean
        hasQnh:
          type: boolean
        hasHumidity:
          type: boolean
        hasRain:
          type: boolean
        telemetryVersion:
          type: integer
          format: int8
    StationDefinitionModel:
      description: "dupa"
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          description: "description123"
          type: string
          example: "skrzyczne"
        enabled:
          type: boolean
          example: true
        callsign:
          type: string
          example: "SR9NSK"
        ssid:
          type: integer
          format: int8
        displayedName:
          type: string
          example: "Skrzyczne"
        displayedLocation:
          type: string
          example: "Góra Skrzyczne, Beskid Śląski"
        sponsorUrl:
          type: string
          example: "http://skrzyczne.pl"
        backgroundJpg:
          type: string
          example: ""
        backgroundJpgAlign:
          type: integer
          format: int32
        stationNameTextColour:
          type: integer
          format: int32
          example: 1
        moreInfo:
          type: string
        lat:
          type: number
        lon:
          type: number
        timezone:
          type: string
        hasWind:
          type: boolean
        hasQnh:
          type: boolean
        hasHumidity:
          type: boolean
        hasRain:
          type: boolean
    ListOfAllStations:
      type: array
      items:
        $ref: '#/components/schemas/StationDefinitionModel'
    LocaleEntry:
      description: "LocaleEntry"
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        stationGroupId:
          type: integer
          format: int32
          example: 1
        language:
          type: string
        text:
          type: string
    StationCurrentLocalTime:
      type: object
      properties:
        year:
          type: integer
          format: int32
        month: 
          type: integer
          format: int32
        day:
          type: integer
          format: int32
        hour:
          type: integer
          format: int32
        minute:
          type: integer
          format: int32
        second:
          type: integer
          format: int32
        timezone:
          type: string
        timezone_offset:
          type: integer
          format: int32
    StationGroupStationsStation:
      type: object
      properties:
        stationId:
          type: integer
          format: int32
        stationName:
          type: string
    StationGroupStations:
      type: object
      properties:
        stationGroupId:
          type: integer
          format: int32
        stationIds:
          type: array
          items:
            $ref: '#/components/schemas/StationGroupStationsStation'
    StationsGroup:
      type: object
      properties:
        id:
          type: integer
          format: int32
        category:
          type: string
          enum:
            - PARAGLIDING
            - SAILING
            - MOUNTAINS
            - CITIES
            - CUSTOM
        locale:
          type: array
          items:
            $ref: '#/components/schemas/LocaleEntry'
        isEnabled:
          type: boolean
        isEmpty:
          type: boolean
        isBuiltin:
          type: boolean
    Status:
      type: object
      properties:
        backend_api_version_string:
          type: string
        backend_api_main_version_number:
          type: integer
          format: int32
        backend_api_patch_version_number:
          type: integer
          format: int32
        backend_api_build_version_number:
          type: integer
          format: int32
        status:
          type: integer
          format: int32
        api_timestamp_epoch:
          type: integer
          format: int64
        api_tz_offset_string:
          type: string
        api_tz_offset_seconds:
          type: integer
          format: int32
        api_timezone:
          type: string
          format: int32
    Summary:
      type: object
      properties:
        last_timestamp:
          type: integer
          format: int64
        number_of_measurements:
          type: integer
          format: int32
        avg_temperature:
          type: number
          format: float
        temperature_qf:
          type: string
        qnh:
          type: integer
          format: int16
        qnh_qf:
          type: string
        humidity:
          type: integer
          format: int8
        humidity_qf:
          type: string
        direction:
          type: integer
          format: int16
        average_speed:
          type: number
          format: float
        gusts:
          type: number
          format: float
        hour_gusts:
          type: number
          format: float
        hour_max_average_speed:
          type: number
          format: float
        hour_min_average_speed:
          type: number
          format: float
        wind_qf:
          type: number
          format: float
    StationDataModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        epoch:
          description: "UTC timestamp in UNIX epoch when this measurement was taken"
          type: integer
          format: int64
        station:
          type: string
        temperature:
          type: number
          format: float
        humidity:
          type: integer
          format: int16
        pressure:
          type: number
          format: float
        winddir:
          type: integer
          format: int16
        windspeed:
          type: number
          format: float
        windgusts:
          type: number
          format: float
        tsource:
          type: string
        wsource:
          type: string
        psource:
          type: string
    TrendData:
      type: object
      properties:
        curent_value:
          type: number
          format: float
        two_hours_value:
          type: number
          format: float
        four_hours_value:
          type: number
          format: float
        six_hours_value:
          type: number
          format: float
        eight_hours_value:
          type: number
          format: float
    Trend:
      type: object
      properties:
        last_timestamp:
          type: integer
          format: int64
        displayed_name:
          type: string
        current_temperature_qf:
          type: string
        current_qnh_qf:
          type: string
        current_humidity_qf:
          type: string
        current_wind_qf:
          type: string
        temperature_trend:
          $ref: '#/components/schemas/TrendData'
        humidity_trend:
          $ref: '#/components/schemas/TrendData'
        pressure_trend:
          $ref: '#/components/schemas/TrendData'
        average_wind_speed_trend:
          $ref: '#/components/schemas/TrendData'
        maximum_wind_speed_trend:
          $ref: '#/components/schemas/TrendData'
        wind_direction_trend:
          $ref: '#/components/schemas/TrendData'